package handler

import (
	"fmt"
	"log"
	"millionaire-list/internal/models"
	"millionaire-list/internal/service"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

type MillionaireHandler struct {
	service *service.MillionaireService
}

func NewMillionaireHandler(service *service.MillionaireService) *MillionaireHandler {
	return &MillionaireHandler{service: service}
}

// üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–≤
func (mh *MillionaireHandler) GetAll(c *gin.Context) {
	pageNum, _ := strconv.Atoi(c.DefaultQuery("pageNum", "1"))
	pageSize, _ := strconv.Atoi(c.DefaultQuery("pageSize", "10"))

	result, err := mh.service.GetAllMillionaires(pageNum, pageSize)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –≤ GetAllMillionaires:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	c.JSON(http.StatusOK, result)
}

// üîé –ü–æ–ª—É—á–∏—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–∞ –ø–æ ID
func (mh *MillionaireHandler) GetByID(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"})
		return
	}

	millionaire, err := mh.service.GetMillionaireByID(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"})
		return
	}

	c.JSON(http.StatusOK, millionaire)
}

// ‚ûï –°–æ–∑–¥–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–∞
func (mh *MillionaireHandler) Create(c *gin.Context) {
	var millionaire models.Millionaire
	if err := c.ShouldBindJSON(&millionaire); err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"})
		return
	}

	err := mh.service.CreateMillionaire(&millionaire)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–ª–ª–∏–æ–Ω–µ—Ä–∞:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏"})
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω"})
}

// üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–∞
func (mh *MillionaireHandler) Update(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"})
		return
	}

	var millionaire models.Millionaire
	if err := c.ShouldBindJSON(&millionaire); err != nil {
		log.Println("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"})
		return
	}

	millionaire.ID = id
	err = mh.service.UpdateMillionaire(&millionaire)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω"})
}

// ‚ùå –£–¥–∞–ª–∏—Ç—å –º–∏–ª–ª–∏–æ–Ω–µ—Ä–∞
func (mh *MillionaireHandler) Delete(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID"})
		return
	}

	err = mh.service.DeleteMillionaire(id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "–ú–∏–ª–ª–∏–æ–Ω–µ—Ä —É–¥–∞–ª–µ–Ω"})
}

// üîç –ü–æ–∏—Å–∫ –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
func (mh *MillionaireHandler) Search(c *gin.Context) {
	lastName := c.Query("lastName")
	firstName := c.Query("firstName")
	middleName := c.Query("middleName")
	country := c.Query("country")
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	pageSize, _ := strconv.Atoi(c.DefaultQuery("pageSize", "10"))

	result, err := mh.service.SearchMillionaire(lastName, firstName, middleName, country, page, pageSize)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–≤"})
		return
	}

	c.JSON(http.StatusOK, result)
}
